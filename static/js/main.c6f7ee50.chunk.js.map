{"version":3,"sources":["sudA.csv","logo.svg","sudB.csv","App.js","reportWebVitals.js","index.js"],"names":["App","useState","bTime","setBTime","bTime1","setBTime1","bTime2","setBTime2","bTime3","setBTime3","bTime4","setBTime4","bTime5","setBTime5","bTime6","setBTime6","data","setData","data1","setData1","data2","setData2","data3","setData3","data4","setData4","data5","setData5","data6","setData6","useEffect","convertTime","mTime","arr","split","parseInt","csv","dataB","then","Map","victoryArr","count","sum","set","Set","i","length","JSON","parse","boardStates","has","uid","add","time","timePassed","push","num","dataA","count1","total","Name","Info","elapsed","num1","Uid","time1","map","newArr","get","concat","value","inputs","inputTotal","console","log","temp","State","substring","move","movement","inputNumber","className","toFixed","domainPadding","x","y","style","width","position","left","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6f7ee50.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/sudA.adfb62f8.csv\";","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/sudB.b055572a.csv\";","import logo from './logo.svg';\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport dataA from \"./sudA.csv\";\nimport dataB from \"./sudB.csv\";\n//import VictoryBar from 'victory';\nimport * as V from 'victory';\nimport { VictoryBar, VictoryChart } from 'victory';\n\n// const csv = require('csv-parser')\n// const fs = require('fs')\n// const results = [];\n\n\nimport { csv } from 'd3';\n\nfunction App() {\n\n  let [bTime, setBTime] = useState(0);\n  let [bTime1, setBTime1] = useState(0);\n  let [bTime2, setBTime2] = useState(0);\n  let [bTime3, setBTime3] = useState(0);\n  let [bTime4, setBTime4] = useState(0);\n  let [bTime5, setBTime5] = useState(0);\n  let [bTime6, setBTime6] = useState(0);\n\n  let [data, setData] = useState([]);\n  let [data1, setData1] = useState([]);\n  let [data2, setData2] = useState([]);\n  let [data3, setData3] = useState([]);\n  let [data4, setData4] = useState([]);\n  let [data5, setData5] = useState([]);\n  let [data6, setData6] = useState([]);\n\n  useEffect(() => {\n\n    let convertTime = function (mTime) {\n      let arr = mTime.split(':');\n      let num = parseInt(arr[0]) * 60 + parseInt(arr[1]);\n      return num;\n    }\n\n    csv(dataB).then(data => {\n      let map = new Map();\n      let victoryArr = [];\n      let count = 1;\n      let sum = 0;\n      let set = new Set();\n      for (let i = 0; i < data.length; i++) {\n        if (JSON.parse(data[i]['q5 info']).boardStates == \"#victory\" && !set.has(data[i].uid)) {\n          set.add(data[i].uid);\n          let time = convertTime(JSON.parse(data[i]['q5 info']).timePassed);\n          victoryArr.push({ num: count++, uid: data[i].uid, time: time });\n          sum = sum + time;\n        }\n      }\n\n      // console.log(\"victory arr\");\n      // console.log(victoryArr);\n      setData(victoryArr);\n      setBTime(sum / count);\n      return set;\n    }).then((set) => {\n      // console.log(set);\n    });\n\n\n    csv(dataA).then(data => {\n      // console.log(\"here A\");\n      let victoryArr = [];\n      let count1 = 1;\n      let sum = 0;\n      let total = 0;\n      for (let i = 0; i < data.length; i++) {\n\n        if (data[i].Name == 'victory') {\n          let time = JSON.parse(data[i].Info).elapsed / 1000;\n          if (time < 600) {\n            total++;\n            sum = sum + time;\n            victoryArr.push({ num1: count1++, uid: data[i].Uid, time1: time });\n\n          }\n        }\n      }\n      // console.log(\"victoryArr\");\n      // console.log(victoryArr);\n      setData1(victoryArr);\n      setBTime1(sum / total);\n\n    });\n\n\n    //time taken between each input\n    csv(dataB).then(data => {\n      //  console.log(\"here B\");\n      let map = new Map();\n      let victoryArr = [];\n      let count = 1;\n      let sum = 0;\n      let set = new Set();\n      for (let i = 0; i < data.length; i++) {\n        // console.log(data[i]);\n\n        if (map.has(data[i].uid)) {\n          let newArr = map.get(data[i].uid).concat(data[i]);\n          map.set(data[i].uid, newArr);\n        } else {\n          map.set(data[i].uid, [data[i]])\n        }\n\n      }\n\n      // console.log(map);\n\n\n      for (let [key, value] of map) {\n        let inputs = 0;\n        let i = 1;\n        for (; i < value.length; i++) {\n\n          //  console.log(value[i]['q6 state'].split('&answer=')[1].split('&work=')[0], value[i - 1]['q6 state'].split('&answer=')[1].split('&work=')[0], value[i]['q6 state'].split('&answer=')[1].split('&work=')[0] == value[i - 1]['q6 state'].split('&answer=')[1].split('&work=')[0]);\n          if (value[i]['q6 state'].split('&answer=')[1].split('&work=')[0] != value[i - 1]['q6 state'].split('&answer=')[1].split('&work=')[0]) {\n            inputs++;\n          }\n        }\n        if (inputs > 0) {\n          victoryArr.push({ count: count++, inputs })\n        }\n      }\n\n      // console.log(victoryArr);\n      let inputTotal = 0;\n      for(let i = 0 ; i < victoryArr.length ; i++){\n        inputTotal = inputTotal + victoryArr[i].inputs;\n      }\n      setBTime2(inputTotal/count);\n      setData2(victoryArr);\n      return set;\n    }).then((set) => {\n      // console.log(set);\n    });\n\n\n\n\n    csv(dataA).then(data => {\n      //  console.log(\"here B\");\n      let map = new Map();\n      let victoryArr = [];\n      let count = 1;\n      let sum = 0;\n      let set = new Set();\n\n      for (let i = 0; i < data.length; i++) {\n        // console.log(data[i]);\n\n        if (map.has(data[i].Uid)) {\n          let newArr = map.get(data[i].Uid).concat(data[i]);\n          map.set(data[i].Uid, newArr);\n        } else {\n          map.set(data[i].Uid, [data[i]])\n        }\n\n      }\n\n      console.log(map);\n\n      let temp = null;\n      for (let [key, value] of map) {\n        let inputs = 0;\n        let i = 1;\n        for (; i < value.length; i++) {\n          if (temp == null) {\n            if (value[i].State && value[i].State.split('&answer=')[1].substring(0, 5) != '&work' && value[i - 1].State && value[i - 1].State.split('&answer=')[1].substring(0, 5) != '&work') {\n\n              if (value[i].State.split('&answer=')[1].split('&work=')[0] != value[i - 1]['State'].split('&answer=')[1].split('&work=')[0]) {\n                inputs++;\n                temp = value[i]['State'].split('&answer=')[1].split('&work=')[0];\n              }\n            }\n          }\n\n          else if(temp){\n\n     \n            if (value[i].State && value[i].State.split('&answer=')[1].substring(0, 5) != '&work') {\n              if (value[i].State.split('&answer=')[1].split('&work=')[0] != temp) {\n                inputs++;\n                temp = value[i]['State'].split('&answer=')[1].split('&work=')[0];\n              }\n            }\n          }\n        }\n        if (inputs > 0) {\n          victoryArr.push({ count: count++, inputs })\n        }\n      }\n\n\n      let inputTotal = 0;\n      for(let i = 0 ; i < victoryArr.length ; i++){\n        inputTotal = inputTotal + victoryArr[i].inputs;\n      }\n      setBTime3(inputTotal/count);\n      setData3(victoryArr);\n      return set;\n    }).then((set) => {\n\n    });\n\n// errors encountered\n\n    csv(dataB).then(data => {\n      let map = new Map();\n      let victoryArr = [];\n      let count = 1;\n      let sum = 0;\n      let set = new Set();\n      for (let i = 0; i < data.length; i++) {\n  \n        if (map.has(data[i].uid)) {\n          let newArr = map.get(data[i].uid).concat(data[i]);\n          map.set(data[i].uid, newArr);\n        } else {\n          map.set(data[i].uid, [data[i]])\n        }\n  \n      }\n\n      for (let [key, value] of map) {\n        let inputs = 0;\n        let i = 1;\n        for (; i < value.length; i++) {\n \n          if (JSON.parse(value[i]['q5 info']).boardStates == '#errors' && JSON.parse(value[i - 1]['q5 info']).boardStates != '#errors') {\n            inputs++;\n          }\n        }\n\n          victoryArr.push({ count: count++, inputs })\n        \n      }\n  \n\n      let inputTotal = 0;\n      for(let i = 0 ; i < victoryArr.length ; i++){\n        inputTotal = inputTotal + victoryArr[i].inputs;\n      }\n      setBTime4(inputTotal/count);\n      setData4(victoryArr);\n      return set;\n    }).then((set) => {\n    });\n\n\n\n\n\n\n// arrow key movement\n    csv(dataB).then(data => {\n      let map = new Map();\n      let victoryArr = [];\n      let count = 1;\n      let sum = 0;\n      let set = new Set();\n      for (let i = 0; i < data.length; i++) {\n  \n        if (map.has(data[i].uid)) {\n          let newArr = map.get(data[i].uid).concat(data[i]);\n          map.set(data[i].uid, newArr);\n        } else {\n          map.set(data[i].uid, [data[i]])\n        }\n  \n      }\n  \n\n      for (let [key, value] of map) {\n        let inputs = 0;\n        let i = 1;\n        for (; i < value.length; i++) {\n      \n          if(value[i]['q3 name'] == 'Arrow_movement'){\n            let move = JSON.parse(value[i]['q5 info']).movement;\n            if (move == 'ArrowUp' || move == 'ArrowDown'|| move == 'ArrowLeft'|| move == 'ArrowRight') {\n              inputs++;\n            }\n          \n          }\n      \n        }\n\n          victoryArr.push({ count: count++, inputs })\n      }\n\n      let inputTotal = 0;\n      for(let i = 0 ; i < victoryArr.length ; i++){\n        inputTotal = inputTotal + victoryArr[i].inputs;\n      }\n      setBTime5(inputTotal/count);\n      \n      setData5(victoryArr);\n      return set;\n    }).then((set) => {\n    });\n\n\n\n// number key input\n    csv(dataB).then(data => {\n      let map = new Map();\n      let victoryArr = [];\n      let count = 1;\n      let sum = 0;\n      let set = new Set();\n      for (let i = 0; i < data.length; i++) {\n  \n        if (map.has(data[i].uid)) {\n          let newArr = map.get(data[i].uid).concat(data[i]);\n          map.set(data[i].uid, newArr);\n        } else {\n          map.set(data[i].uid, [data[i]])\n        }\n  \n      }\n  \n     // console.log(map);\n  \n      for (let [key, value] of map) {\n        let inputs = 0;\n        let i = 1;\n        for (; i < value.length; i++) {\n         // console.log(value[i]);\n          if(value[i]['q3 name'] == 'keyboard_input'){\n           if(JSON.parse(value[i]['q5 info']).inputNumber){\n             inputs++;\n           }\n          }\n      \n        }\n          victoryArr.push({ count: count++, inputs })\n      }\n      \n      let inputTotal = 0;\n      for(let i = 0 ; i < victoryArr.length ; i++){\n        inputTotal = inputTotal + victoryArr[i].inputs;\n      }\n      setBTime6(inputTotal/count);\n      setData6(victoryArr);\n      \n      return set;\n    }).then((set) => {\n    });\n\n\n  }, []);\n\n\n\n\n \n\n\n\n  //   time1: 46059.496\n  // uid: \"OS_X-Chrome-32718434860304346\"\n  return (\n    <div className=\"App\">\n      <h1>Sudoku B Implementation victory time</h1>\n\n      <p><b>x-axis</b> : user number (1-10)  &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>y-axis</b> : time taken to solve puzzle in seconds &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Average time taken to solve : {bTime.toFixed(2)} seconds</b></p>\n\n      <VictoryChart domainPadding={20}>\n        <VictoryBar\n          data={data}\n          // data accessor for x values\n          x=\"num\"\n          // data accessor for y values\n          y=\"time\"\n        />\n      </VictoryChart>\n\n      <br />\n      <br />\n      \n      <hr style = {{width : \"100%\" , position : \"absolute\" , left : \"0px\"}} />\n      <br />\n      <br />\n      <br />\n\n      <h1>Sudoku A Implementation victory time</h1>\n      <h3>(outliers with 600 seconds+ time were removed)</h3>\n      <p><b>x-axis</b> : number # of games played (~280) &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>y-axis</b> : time taken to solve puzzle in seconds &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Average time taken to solve : {bTime1.toFixed(2)} seconds</b></p>\n\n      <VictoryChart >\n        <VictoryBar\n          data={data1}\n          // data accessor for x values\n          x=\"num1\"\n          // data accessor for y values\n          y=\"time1\"\n        />\n      </VictoryChart>\n\n      \n      <hr style = {{width : \"100%\" , position : \"absolute\" , left : \"0px\"}} />\n      <br />\n      <br />\n\n      <div>\n        <h1>Sudoku B number of inputs given(mouse + keyboard) to update/create/delete number in a cell</h1>\n        <p><b>x-axis</b> : user number (1-10)  &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>y-axis</b> : number of inputs &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>\n        <p> <b> average number of inputs per user per game : </b> {bTime2.toFixed(2)} </p>\n        <VictoryChart domainPadding={20}>\n          <VictoryBar\n            data={data2}\n            // data accessor for x values\n            x=\"count\"\n            // data accessor for y values\n            y=\"inputs\"\n          />\n        </VictoryChart>\n      </div>\n\n      <hr style = {{width : \"100%\" , position : \"absolute\" , left : \"0px\"}} />\n      <br />\n      <br />\n      <br />\n\n      <div>\n        <h1>Sudoku A number of inputs given(mouse only) to update/create/delete number in a cell</h1>\n        <p><b>x-axis</b> : user number (1-10)  &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>y-axis</b> : time taken between inputs &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>\n        <p> <b> average mouse only input per user only : </b> {bTime3.toFixed(2)} </p>\n        <VictoryChart domainPadding={20}>\n          <VictoryBar\n            data={data3}\n            // data accessor for x values\n            x=\"count\"\n            // data accessor for y values\n            y=\"inputs\"\n          />\n        </VictoryChart>\n      </div>\n\n      <hr style = {{width : \"100%\" , position : \"absolute\" , left : \"0px\"}} />\n      <br />\n      <br />\n      <br />\n\n\n\n      <div>\n        <h1>Sudoku B number of errors encountered while playing(reading available to B only)</h1>\n        <p><b>x-axis</b> : user number (1-10)  &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>y-axis</b> : number of errors encountered &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>\n        <p> <b> errors encounterd per user per game : </b> {bTime4.toFixed(2)} </p>\n        (low number/0 on y means axis means the user did not encounter any error while playing, an expert sudoku player)\n        <VictoryChart domainPadding={20}>\n          <VictoryBar\n            data={data4}\n            // data accessor for x values\n            x=\"count\"\n            // data accessor for y values\n            y=\"inputs\"\n          />\n        </VictoryChart>\n      </div>\n\n\n      <hr style = {{width : \"100%\" , position : \"absolute\" , left : \"0px\"}} />\n      <br />\n      <br />\n      <br />\n\n\n\n      <div>\n        <h1>Sudoku B arrow keys used per player(reading available to B only)</h1>\n        <p><b>x-axis</b> : user number (1-10)  &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>y-axis</b> : number of arrow inputs given &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>\n        <p> <b>Average arrow key inputs per user per game : </b> {bTime5.toFixed(2)} </p>\n        <p> (0 on y means axis means the user did not use the arrow keys at all) </p>\n        <VictoryChart domainPadding={20}>\n          <VictoryBar\n            data={data5}\n            // data accessor for x values\n            x=\"count\"\n            // data accessor for y values\n            y=\"inputs\"\n          />\n        </VictoryChart>\n      </div>\n\n\n\n      <hr style = {{width : \"100%\" , position : \"absolute\" , left : \"0px\"}} />\n      <br />\n      <br />\n      <br />\n\n\n\n\n      <div>\n        <h1>Sudoku B number inputs given(1/2/3/4)(reading available to B only)</h1>\n        <p><b>x-axis</b> : user number (1-10)  &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>y-axis</b> : number of arrow inputs given &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n        <p> <b>Average keyboard inputs per user per game : </b> {bTime6} </p>\n        <p> (0 on y means axis means the user did not use number input at all) </p>\n        \n        <VictoryChart domainPadding={20}>\n          <VictoryBar\n            data={data6}\n            // data accessor for x values\n            x=\"count\"\n            // data accessor for y values\n            y=\"inputs\"\n          />\n        </VictoryChart>\n      </div>\n      {/* <div>\n        <h1>Sudoku B number of inputs given(board state change record event)</h1>\n        <p><b>x-axis</b> : user number (1-10)  &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>y-axis</b> : time taken between inputs &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>\n\n        <VictoryChart domainPadding={20}>\n          <VictoryBar\n            data={data2}\n            // data accessor for x values\n            x=\"count\"\n            // data accessor for y values\n            y=\"inputs\"\n          />\n        </VictoryChart>\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}